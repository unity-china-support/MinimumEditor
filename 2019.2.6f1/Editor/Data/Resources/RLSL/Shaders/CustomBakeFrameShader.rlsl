/*
    The contents of this file are provided under the terms described in the accompanying License.txt file. Use of this file in any way acknowledges acceptance of these terms.
    Copyright(c) 2010 - 2017, Imagination Technologies Limited and / or its affiliated group companies. All rights reserved.
*/

uniform sampler2D  PositionsTex;
uniform int PassIdx;
uniform int SamplesPerPass;
uniform int SamplesSoFar;
uniform int TotalSampleCount;

void setup()
{
    rl_OutputRayCount = SamplesPerPass;
}

void ProbeSampling(vec3 pos, int rayCount, int totalRayCount, float rayOffset)
{
    int sampleIndex = totalRayCount;
    float weight = 4.0/float(TotalSampleCount);

    // Shift is different per probe, this makes a unique scramble per probe. This is needed to ensure a unique Sobol sequence per sample. This is white noise decorrelation.
    int scramble = GetScreenCoordHash(rl_FrameCoord.xy);
    int base = scramble % IntegratorSamples.numGoldenSamples; // We do this as it is not safe to directly add to a scramble value generated by GetScreenCoordHash as we could then go above INT_MAX and the modulo could return a negative value.
    int dim0_rnd = (base + 0) % IntegratorSamples.numGoldenSamples;
    int dim1_rnd = (base + 1) % IntegratorSamples.numGoldenSamples;
    int dim2_rnd = (base + 2) % IntegratorSamples.numGoldenSamples;
    vec3 cpShift = vec3(IntegratorSamples.goldenSamples[dim0_rnd], IntegratorSamples.goldenSamples[dim1_rnd], IntegratorSamples.goldenSamples[dim2_rnd]);
    float cpShiftOffset = cpShift.z; // This dimension is used to randomize the position of the probe samples.

    for(int i = 0; i < rayCount; ++i, ++sampleIndex)
    {
        vec2 rnd = fract(vec2(SobolSample(sampleIndex, 0, 0), SobolSample(sampleIndex, 1, 0)) + cpShift.xy);
        vec3 direction = SphereSample(rnd);

        // We don't want the full sphere, we only want the upper hemisphere.
        if (direction.y < 0.0)
            direction = vec3(direction.x, -direction.y, direction.z);

        float randOffset = 0.1 * rayOffset + 0.9 * rayOffset * fract(SobolSample(sampleIndex, 2, 0) + cpShiftOffset);

        createRay();
        rl_OutRay.origin           = pos + direction * randOffset;
        rl_OutRay.direction        = direction;
        rl_OutRay.color            = vec4(1.0); // multiplied by transmission in the Standard shader
        rl_OutRay.probeDir         = normalize(direction);
        rl_OutRay.defaultPrimitive = GetEnvPrimitive();
        rl_OutRay.renderTarget     = CUSTOM_BAKE_BUFFER;
        rl_OutRay.isOutgoing       = true;
        rl_OutRay.sampleIndex      = sampleIndex;
        rl_OutRay.cpShift          = cpShift;
        rl_OutRay.rayClass         = GI_RAY_CLASS;
        rl_OutRay.depth            = 0;
        rl_OutRay.weight           = weight;
        // Needs to be false, otherwise rl_FrontFacing is never set/never false.
        rl_OutRay.occlusionTest    = false;
        rl_OutRay.albedo           = vec3(1.0);
        rl_OutRay.sameOriginCount  = 0;
        rl_OutRay.lightmapMode     = LIGHTMAPMODE_NONDIRECTIONAL; // Not used with probe sampling.
        emitRayWithoutDifferentials();
    }
}

void main()
{
    vec2  frameCoord  = rl_FrameCoord.xy / rl_FrameSize.xy;

    vec4 posTex = texture2D(PositionsTex, frameCoord);

    // Unused texels
    if(posTex.w <= 0.0)
        return;

    ProbeSampling(posTex.xyz, SamplesPerPass, SamplesSoFar, posTex.w);
}
